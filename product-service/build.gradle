import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.postgresql:postgresql:42.2.5"
    }
}

plugins {
    id "java"
    id "application"
    id "org.springframework.boot"
    id "com.google.protobuf"
    id "com.bmuschko.docker-remote-api"
    id "org.flywaydb.flyway" version "6.0.8"
}

repositories {
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://repo.spring.io/libs-snapshot" }
}

dependencies {
    protobuf project(':product-service-idl')

    implementation 'com.netifi:netifi-spring-boot-starter'
    implementation 'org.postgresql:postgresql:42.2.5'
    implementation 'org.flywaydb:flyway-core'
    implementation 'io.r2dbc:r2dbc-postgresql:1.0.0.M6'
    implementation 'io.r2dbc:r2dbc-pool:0.8.0.M8'
}

mainClassName = 'example.service.product.ProductServiceApplication'

// Database
flyway {
    url = 'jdbc:postgresql://localhost:5432/postgres'
    user = 'postgres'
    password = 'postgres'
}

// Packaging
task buildImage(type: DockerBuildImage, dependsOn: build) {
    buildArgs = ['JAR_FILE': "${bootJar.archiveName}"]
    dockerFile = file("${projectDir}/Dockerfile")
    inputDir = file("${projectDir}")
    tags = ["netifi-r2dbc-example/${projectDir.name}", "netifi-r2dbc-example/${projectDir.name}:${version}"]
}

// RSocket RPC
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc'
    }

    plugins {
        rsocketRpc {
            artifact = 'io.rsocket.rpc:rsocket-rpc-protobuf'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                rsocketRpc {}
            }
        }
    }
}